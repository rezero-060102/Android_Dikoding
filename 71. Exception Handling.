Exception Handling
Exception handling dapat diterapkan dengan beberapa cara. Di antaranya adalah dengan menggunakan try-catch, try-catch-finally, dan multiple catch. Mari kita pelajari ketiga cara tersebut.



try-catch
Salah satu cara untuk menangani suatu exception adalah menggunakan try-catch. Kode yang dapat membangkitkan suatu exception disimpan dalam blok try, dan jika exception tersebut terjadi, maka blok catch akan terpanggil. Berikut cara penulisan try-catch pada Kotlin: 

try {
    // Block try, menyimpan kode yang membangkitkan exception
} catch (e: SomeException) {
    // Block catch akan terpanggil ketika exception bangkit.
}

Dengan menuliskan kode dalam blok try, kode kita menjadi terproteksi dari exception. Jika terjadi exception maka program tidak akan terhenti atau crash, namun akan dilempar menuju blok catch.  Di sana kita dapat menuliskan sebuah kode alternatif untuk menampilkan pesan eror atau yang lainnya.

fun main() {
    val someNullValue: String? = null
    lateinit var someMustNotNullValue: String
 
    try {
        someMustNotNullValue = someNullValue!!
        println(someMustNotNullValue)
    } catch (e: Exception) {
        someMustNotNullValue = "Nilai String Null"
        println(someMustNotNullValue)
    }
}
 
/*
output:
    Nilai String Null
*/



try-catch-finally
Selain terdapat blok try dan catch, ada juga blok finally. Hanya saja blok ini bersifat opsional. finally akan dieksekusi setelah program keluar dari blok try ataupun catch. Bahkan finally juga tereksekusi ketika terjadi exception yang tidak terduga. Exception tidak terduga terjadi ketika kita menggunakan NullPointerException pada catch namun exception yang terjadi adalah NumberFormatException. 

Sebagai contoh, mari kita ubah kode yang sebelumnya dengan menerapkan finally:

fun main() {
    val someNullValue: String? = null
    lateinit var someMustNotNullValue: String
 
    try {
        someMustNotNullValue = someNullValue!!
    } catch (e: Exception) {
        someMustNotNullValue = "Nilai String Null"
    } finally {
        println(someMustNotNullValue)
    }
}
 
/*
output:
    Nilai String Null
*/

Dengan menerapkan finally, fungsi println() cukup dituliskan pada blok finally.



Multiple Catch
Dari kode yang kita coba sebelumnya, kita menggunakan exception untuk menangani semua tipe exception yang terjadi. Baik itu ketika terjadi NullPointerException atau NumberFormatException. Sebenarnya pada catch kita dapat secara spesifik memilih tipe exception apa yang ingin ditangani. Multiple catch memungkinkan untuk penanganan exception dapat ditangani lebih dari satu tipe exception. Hal ini sangat berguna ketika kita ingin menangani setiap tipe exception dengan perlakuan yang berbeda. Berikut contoh struktur kode dengan menerapkan multiple catch:

try{
    // Block try, menyimpan kode yang membangkitkan exception
} catch (e: NullPointerException) {
    // Block catch akan terpanggil ketika terjadi NullPointerException.
} catch (e: NumberFormatException) {
    // Block catch akan terpanggil ketika terjadi NumberFormatException.
} catch (e: Exception) {
    // Block catch akan terpanggil ketika terjadi Exception selain keduanya.
}
finally {
    // Block finally akan terpanggil setelah keluar dari block try atau catch
}


Dari struktur kode di atas, kita dapat melihat terdapat 3 (tiga) blok catch. Block catch yang pertama menggunakan parameter NullPointerException, sehingga jika terjadi NullPointerException maka blok catch tersebut akan dieksekusi. Yang kedua block catch dengan parameter NumberFormatException, sehingga jika terjadi NumberFormatException maka blok tersebut yang akan dieksekusi. Dan yang terakhir blok catch dengan parameter Exception, blok ini akan menangani seluruh exception yang terjadi kecuali untuk dua exception yang telah ditentukan pada blok sebelumnya. 

Mari kita coba terapkan contoh kode yang sebelumnya kita buat dengan menggunakan multiple catch.

import kotlin.NumberFormatException
 
fun main() {
    val someStringValue: String? = null
    var someIntValue: Int = 0
 
    try {
        someIntValue = someStringValue!!.toInt()
    } catch (e: NullPointerException) {
        someIntValue = 0
    } catch (e: NumberFormatException) {
        someIntValue = -1
    } finally {
        when(someIntValue){
            0 -> println("Catch block NullPointerException terpanggil !")
            -1 -> println("Catch block NumberFormatException terpanggil !")
            else -> println(someIntValue)
        }
    }
}
 
/*
	output:
    Catch block NullPointerException terpanggil!
*/

Output kode di atas menjelaskan bahwa blok catch dengan parameter NullPointerException terpanggil. Sebabnya, pada variabel someStringValue kita menetapkan null sebagai nilainya.

Berbeda ketika kita menginisialisasi nilai someStringValue dengan nilai “12.0” maka exception yang akan terjadi adalah NumberFormatException dengan begitu blok catch kedua yang akan terpanggil dan akan menghasilkan output sebagai berikut:
Catch block NumberFormatException terpanggil!

Namun jika kedua exception tersebut tidak terjadi, dalam arti nilai someStringValue berhasil diubah dalam bentuk Integer, maka output yang dihasilkan adalah nilai dari Integernya tersebut. Contohnya, saat nilai someStringValue diinisialisasi dengan nilai “12.” Berikut ini hasilnya. :

12


