Primary Constructor
Ketika suatu objek dibuat, semua properti pada kelas tersebut harus memiliki nilai. Kita dapat langsung menginisialisasi pada properti tertentu atau menginisialisasinya melalui constructor (konstruktor). Konstruktor merupakan fungsi spesial yang digunakan untuk menginisialisasi properti yang terdapat pada kelas tersebut. 

Terdapat 2 (dua) tipe konstruktor pada Kotlin, yaitu primary constructor dan secondary constructor. Yuk, kita coba mempelajarinya bersama.



Primary Constructor
Seperti namanya, jika akan membuat suatu objek dari sebuah kelas dan kelas tersebut memiliki primary constructor di dalamnya, kita harus mengirim nilai sesuai properti yang dibutuhkan. Penulisan primary constructor mirip seperti parameter pada fungsi. Properti cukup dituliskan pada header class diawali dengan var atau val. Perhatikan kode berikut.

class Animal(val name: String, val weight: Double, val age: Int, val isMammal: Boolean)

Pada baris kode tersebut, kita tidak hanya membuat sebuah kelas, tetapi sekaligus menambahkan sebuah primary constructor pada kelas tersebut. Sekarang mari kita coba membuat objek dari kelas tersebut.

fun main(){
    val dicodingCat = Animal("Dicoding Miaw", 4.2, 2, true)
    println("Nama: ${dicodingCat.name}, Berat: ${dicodingCat.weight}, Umur: ${dicodingCat.age}, mamalia: ${dicodingCat.isMammal}" )
}
 
/*
output:
    Nama: Dicoding Miaw, Berat: 4.2, Umur: 2, mamalia: true
*/

Perhatikan kode di atas. Karena kelas Animal memiliki primary constructor, kita perlu mengirimkan beberapa nilai yaitu name, weight, age, dan isMammal saat membuat objeknya.

Primary constructor juga dapat memiliki nilai default jika kita tidak menetapkan nilai untuk parameter tersebut. Contohnya, kita bisa memberikan nilai default terhadap properti age. Sehingga, ketika pembuatan objek, pengiriman nilai age pada primary constructor bersifat opsional. 

Untuk membuat nilai default pada sebuah primary constructor, kita perlu menginisialisasi nilai pada saat kita menuliskan properti pada kelas. Perhatikan kode berikut.

class Animal(var name: String, var weight: Double, var age: Int = 0, var isMammal: Boolean = true)

Kode tersebut menunjukan bahwa kita membuat nilai default pada properti age yang bernilai 0 dan isMammal yang bernilai true. Sehingga, pada pembuatan objek Animal, kita bisa mengirimkan nilai name dan weight saja pada primary constructor. Mari kita coba membuat objek dengan memanfaatkan nilai default pada konstruktor.

fun main(){
    val dicodingCat = Animal("Dicoding Miaw", 4.2)
    println("Nama: ${dicodingCat.name}, Berat: ${dicodingCat.weight}, Umur: ${dicodingCat.age}, mamalia: ${dicodingCat.isMammal}" )
}
 
/*
 output:
    Nama: Dicoding Miaw, Berat: 4.2, Umur: 0, mamalia: true
*/

Hasil dari kode tersebut memperlihatkan bahwa properti age dan isMammal memiliki nilai default. Sekali lagi, properti tersebut bersifat opsional sehingga kita tetap dapat mengirimkan nilai pada properti walaupun telah memiliki nilai default. 

Kita juga dapat secara eksplisit memilih properti yang ingin kita berikan nilai dengan menambahkan nama properti dan tanda = sebelum mengisikan nilai properti.

val dicodingCat = Animal("Dicoding Miaw", 4.2, isMammal =  true)


Init block
Kotlin menyediakan blok init yang memungkinkan kita untuk menuliskan properti di dalam body class ketika kita menggunakan primary constructor. Memang, memiliki kode banyak di dalam body class bukanlah hal yang baik. Kotlin bertujuan agar kita dapat menuliskan kode seminimal mungkin. Tapi blok init di sini memiliki beberapa fungsi selain menginisialisasi properti kelas.  satu fungsi lainnya adalah untuk membantu dalam memvalidasi sebuah nilai properti sebelum diinisialisasi. Pada kelas Animal contohnya, kita dapat melakukan verifikasi bahwa berat dan umur hewan tidak boleh bernilai kurang dari nol.

Untuk membuatnya, kita dapat menggunakan keyword init kemudian inisialisasikan semua properti di dalam blok tersebut dengan parameter kelas.

class Animal(pName: String, pWeight: Double, pAge: Int, pIsMammal: Boolean){
    val name: String
    val weight: Double
    val age: Int
    val isMammal: Boolean
 
    init {
        weight = if(pWeight < 0) 0.1 else pWeight
        age = if(pAge < 0) 0 else pAge
        name = pName
        isMammal = pIsMammal
    }
}

Primary constructor dan init harus saling terhubung. Fungsi init dijalankan ketika suatu objek dibuat dengan menggunakan primary constructor. Mari kita coba untuk membuatnya.

fun main() {
    val dicodingCat = Animal("Dicoding Miaw", 4.2, 2, true)
    println("Nama: ${dicodingCat.name}, Berat: ${dicodingCat.weight}, Umur: ${dicodingCat.age}, mamalia: ${dicodingCat.isMammal}")
}
 
/*
output:
    Nama: Dicoding Miaw, Berat: 4.2, Umur: 2, mamalia: true
*/

Perhatikan juga penamaan antara properti pada body class dan parameter pada head class penamaan antara keduanya harus berbeda agar tidak terjadi ambiguitas. Lantas bagaimana jika kita ingin penamaan keduanya sama? Untuk menghindari ambiguitas kita dapat menggunakan keyword this dalam menginisialisasi properti tersebut dalam blok init.

class Animal(name: String, weight: Double, age: Int, isMammal: Boolean) {
    val name: String
    val weight: Double
    val age: Int
    val isMammal: Boolean
 
    init {
        this.weight = if(weight < 0) 0.1 else weight
        this.age = if(age < 0) 0  else age
        this.name = name
        this.isMammal = isMammal
    }
}

Kata kunci this tersebut merujuk kepada suatu kelas. Maksudnya adalah ketika menggunakan kelas tersebut dan diikuti dengan nama properti, berarti kita menunjuk pada properti yang terdapat pada kelas. Dengan begitu, tidak akan ada ambiguitas walaupun kita menggunakan penamaan yang sama antara properti dan parameter primary constructor.
