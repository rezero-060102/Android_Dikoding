Higher-Order Function
Dalam mendeklarasi lambda, khususnya jika ingin ditetapkan agar dapat mengembalikan nilai, terkadang kompiler tidak dapat menentukan tipenya. Alhasil, kita perlu menuliskannya secara eksplisit. Terdapat beberapa tipe deklarasi yang dapat kita gunakan untuk mendeklarasi lambda antara lain sebagai berikut.

var sum: (Int) -> Int = { value -> value + value }

Tipe deklarasi pada kode di atas adalah contoh ketika kita ingin membuat lambda yang memiliki 1 (satu) parameter bertipen data Int dengan tipe kembalian Int. Untuk tipe deklarasi lainnya, akan kita bahas pada submodul berikutnya.

Dengan ditetapkannya tipe deklarasi pada fungsi tersebut, memungkinkan kita untuk bisa menggunakannya sebagai argumen untuk fungsi lainnya. Contohnya seperti berikut.

fun main() {
    printResult(10 ,sum)
}
 
fun printResult(value: Int, sum: (Int) -> Int) {
    val result = sum(value)
    println(result)
}
 
var sum: (Int) -> Int = { value -> value + value }
 
/*
   output : 20
*/

Konsep ini dinamakan sebagai Higher-Order Function, yaitu sebuah fungsi yang menggunakan fungsi lainnya sebagai parameter, menjadikan tipe kembalian, ataupun keduanya.

Melanjutkan penulisan kode di atas, kita bisa juga melampirkan isi lambda secara langsung ketika fungsi printResult() di atas dipanggil seperti berikut.

fun main() {
    printResult(10, { value ->
        value + value
    })
}
 
fun printResult(value: Int, sum: (Int) -> Int) {
    val result = sum(value)
    println(result)
}
 
/*
   output : 20
*/

Selanjutnya ada konvensi penulisan yang menarik di Kotlin, yakni apabila parameter terakhir pada sebuah fungsi berupa lambda, argumen tersebut dapat dituliskan di luar paranthesis seperti ini.

fun main() {
    printResult(10){ value ->
        value + value
    }
}
 
fun printResult(value: Int, sum: (Int) -> Int) {
    val result = sum(value)
    println(result)
}
 
/*
   output : 20
*/

Agar semakin paham, Anda juga bisa melihat contoh lain pada kode berikut.

- Sebelum	
fun main(){
  printMessage("Dicoding", message)
}

val message = { name: String ->
  "Hello $name"
}

fun printMessage(name: String, message: (String) -> String) {
  print(message(name))
}

- Sesudah
fun main(){
  printMessage("Dicoding") { name: String ->
 	"Hello $name"
  }
}

fun printMessage(name: String, message: (String) -> String) {
  print(message(name))
}



Dalam contoh di atas, Anda tidak perlu mendefinisikan tipe data dari function message atau (String) -> String. Sebab, Kotlin bisa langsung menerjemahkan tipe data sesuai kode yang Anda tulis. High-order function membantu Anda untuk menulis secara efisien. Yang awalnya Anda perlu menuliskan beberapa hal, Anda cukup menggabungkannya sehingga mudah untuk dikelola. 



Inline Function
Seperti yang Anda lihat, Higher-Order Function sangat bermanfaat untuk mengembangkan aplikasi. Namun, perlu diketahui bahwa penggunaan Higher-Order Function memiliki dampak terhadap performa program. Hal ini karena ketika Higher-Order Function dijalankan, di balik layar terjadi proses pembuatan instance yang banyak jika dipangil berulang-ulang. Memang jika kodenya masih sedikit, hal ini tidaklah begitu terasa. Namun, jika ada sudah mulai banyak, baru akan terasa dampaknya.

Sebagai contoh perhatikan kode berikut.

fun main() {
    printResult(10){ value ->
        value + value
    }
    printResult(20){ value ->
        value + value
    }
}
 
fun printResult(value: Int, sum: (Int) -> Int) {
    val result = sum(value)
    println(result)
}

Perhatikan bahwa printResult yang mengandung Higher-Order Function dipanggil dua kali. Kemudian perhatikan kode yang dihasilkan oleh compiler dengan cara memilih Tools > Kotlin > Show Kotlin Bytecode. Kemudian tekan tombol Decompile pada panel Kotlin Bytecode.dos:124b264a324cc7df08a179dd5c19fa2220230207143501.png

Alhasil, lihatlah kode yang sudah di-decompile tersebut.

public static final void main() {
    printResult(10, (Function1)null.INSTANCE);
    printResult(20, (Function1)null.INSTANCE);
}
...

Perhatikan bahwa instance dari printResult dibuat sesuai dengan berapa kali fungsi tersebut dipanggil. Ini baru dua, bayangkan jika ada ratusan pemanggil fungsi. Tentu instance yang dibuat akan sangat banyak.

Nah, untuk mengatasi hal tersebut, muncullah keyword inline seperti berikut. 

inline fun printResult(value: Int, sum: (Int) -> Int) {
    val result = sum(value)
    println(result)
}

Inline adalah fitur dalam bahasa Kotlin yang memungkinkan Anda untuk menyertakan seluruh kode dari suatu fungsi atau lambda (expression function) pada saat kompilasi, sehingga mempercepat waktu eksekusi program. Apabila kita periksa pada kode yang sudah di-decompile. Hasilnya akan seperti berikut.

public static final void main() {
    int value$iv = 10;
    int $i$f$printResult = false;
    int var3 = false;
    int result$iv = value$iv + value$iv;
    System.out.println(result$iv);
    value$iv = 20;
    $i$f$printResult = false;
    var3 = false;
    result$iv = value$iv + value$iv;
    System.out.println(result$iv);
 }
 ...
 public static final void printResult(int value, @NotNull Function1 sum) {
    int $i$f$printResult = 0;
    Intrinsics.checkNotNullParameter(sum, "sum");
    int result = ((Number)sum.invoke(value)).intValue();
    System.out.println(result);
 }

Anda tidak perlu paham kode yang dihasilkan, tetapi cukup perhatikan bahwa sekarang ada fungsi printResult yang juga dibuat di kode tersebut sehingga tidak ada pembuatan instance yang banyak lagi. 

Tanpa inline, bayangkan Anda seperti menyalin tulisan ke dalam kertas lain secara manual. Jika membutuhkan banyak salinan, tentu Anda akan memakan waktu dan membutuhkan usaha lebih. Nah, penggunaan inline ibarat penggunaan fotocopy, Anda cukup membuat mesin fotocopy sekali dan mesin tersebut yang akan menyalin tulisan dengan mudah dan tentunya cepat. 

Namun, perlu diingat bahwa mesin tersebut juga membutuhkan ruang lebih banyak dan memakan lebih banyak energi. Penggunakan inline juga dapat menyebabkan file binary program menjadi lebih besar dan memperlambat waktu kompilasi. Oleh karena itu, perlu dipikirkan dengan baik sebelum menggunakan inline.


