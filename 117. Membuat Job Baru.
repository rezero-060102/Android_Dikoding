Membuat Job Baru
Job dapat diinisialisasikan menggunakan fungsi launch() maupun Job() seperti berikut:

//menggunakan launch():
fun main() = runBlocking {
    val job = launch {
        // Do background task here
    }
}
 
//menggunakan Job():
fun main() = runBlocking {
    val job = Job()
}

Setelah diinisialisasikan, job akan memiliki state New dan akan langsung dijalankan. Jika Anda ingin membuat sebuah job tanpa langsung menjalankannya, Anda bisa memanfaatkan CoroutineStart.LAZY seperti berikut:

fun main() = runBlocking {
    val job = launch(start = CoroutineStart.LAZY) {
        TODO("Not implemented yet!")
    }
}

Dengan begitu job tersebut bisa dijalankan saat nanti dibutuhkan.



Menjalankan Job
Setelah membuat sebuah job, kini kita bisa mulai menjalankan job tersebut. Caranya pun cukup sederhana, kita bisa menggunakan fungsi start() seperti berikut:

fun main() = runBlocking {
    val job = launch(start = CoroutineStart.LAZY) {
        delay(1000L)
        println("Start new job!")
    }
 
    job.start()
    println("Other task")
}

// Output :
// Other task
// Start new job!

Atau bisa juga dengan menggunakan fungsi join():

fun main() = runBlocking {
    val job = launch(start = CoroutineStart.LAZY) {
        delay(1000L)
        println("Start new job!")
    }
 
    job.join()
    println("Other task")
}

Perbedaan dari keduanya adalah bahwa yang start() akan memulai job tanpa harus menunggu job tersebut selesai, sedangkan join() akan menunda eksekusi sampai job selesai. Jika kode pertama dijalankan, maka konsol akan menampilkan hasil berikut:

Other task

Start new job!

Sedangkan kode kedua akan menampilkan hasil:

Start new job!

Other task

Setelah dijalankan,  job akan memiliki state Active.


