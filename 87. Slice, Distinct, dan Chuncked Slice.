Slice, Distinct, dan Chuncked
Slice
Setelah pembahasan fungsi take() pada sub-modul sebelumnya, muncul pertanyaan, bagaimana jika kita ingin menyaring item dari posisi tertentu? Untuk itu kita bisa memanfaatkan fungsi slice(). Dalam penggunaannya, fungsi slice() membutuhkan sebuah argumen berupa Range yang digunakan untuk menentukan posisi pertama dan terakhir yang akan disaring. Berikut contohnya:

val total = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
val slice = total.slice(3..6)

println(slice)

/*
    output: [4, 5, 6, 7]
    */

Karena menggunakan Range, kita juga bisa menggunakan operator step ketika argumennya disematkan seperti berikut:

val total = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
val slice = total.slice(3..6 step 2)

println(slice)

/*
    output: [4, 6]
    */

Kemudian jika ingin menentukan posisi yang lebih spesifik, kita bisa mendefinisikannya di dalam sebuah collection, kemudian disematkan sebagai argumen. Misal seperti di bawah berikut:

val index = listOf(2, 3, 5, 8)
val total = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
val slice = total.slice(index)

println(slice)

/*
    output: [3, 4, 6, 9]
    */

Kita harus berhati-hati dalam menentukan cakupan index untuk mendapatkan data. Karena dapat menyebabkan terjadinya ArrayIndexOutOfBoundsException jika posisi yang ditentukan tidak terdapat pada objek collection.



Distinct
Saat berurusan dengan item yang sama di dalam sebuah collection, untuk menyaring item yang sama tersebut kita akan melakukan iterasi dan membandingkan setiap itemnya. Namun dengan Kotlin kita tidak perlu melakukannya secara manual, karena Kotlin Collection menyediakan fungsi untuk melakukannya dengan mudah yaitu fungsi distinct(). Sebagai contoh:

val total = listOf(1, 2, 1, 3, 4, 5, 2, 3, 4, 5)
val distinct = total.distinct()

println(distinct)

/*
    output: [1, 2, 3, 4, 5]
    */

Sama halnya seperti beberapa fungsi sebelumnya yang sudah dibahas, fungsi distinct() bisa langsung dipanggil dari objek collection. Kita juga bisa menggunakannya pada collection dengan tipe parameter seperti data class. Misal seperti berikut:

data class Item(val key: String, val value: Any)

fun main(args: Array<String>) {
    val items = listOf(
    Item("1", "Kotlin"),
    Item("2", "is"),
    Item("3", "Awesome"),
    Item("3", "as"),
    Item("3", "Programming"),
    Item("3", "Language")
    )
    
    val distinctItems = items.distinctBy { it.key }
    distinctItems.forEach {
    println("${it.key} with value ${it.value}")
    }
    
    /*
    output:
        1 with value Kotlin
        2 with value is
        3 with value Awesome
    */
}

Menariknya, kita bisa juga menentukan proses penyaringan item yang sama seperti apa yang akan dijalankan dengan menggunakan fungsi distinctBy(). Misal kita ingin menyaring item yang memiliki panjang sama, kita bisa melakukannya seperti berikut:

val text = listOf("A", "B", "CC", "DD", "EEE", "F", "GGGG")
val distinct = text.distinctBy {
    it.length
}

println(distinct)

/*
    output: [A, CC, EEE, GGGG]
    */

Yang perlu diperhatikan, fungsi distinct() tidak dapat digunakan pada object Map Collection.



Chunked
Sama seperti fungsi split(), fungsi chunked() bisa kita gunakan untuk memecah nilai String menjadi beberapa bagian kecil dalam bentuk Array. Namun untuk penerapannya sedikit berbeda, di mana fungsi split() membutuhkan argumen berupa RegEx sebagai parameter sedangkan chunked() membutuhkan nilai yang akan digunakan sebagai jumlah indeks untuk pemisah. Contoh penggunaannya seperti berikut:

val word = "QWERTY"
val chunked = word.chunked(3)

println(chunked)

/*
    output:[QWE, RTY]
    */

Selain itu, kita juga bisa menggunakannya untuk memodifikasi setiap nilai yang sudah dipecah. Contoh, hasil dari nilai yang sudah dipecah ingin kita buat menjadi huruf kecil, maka kita bisa menggunakan fungsi chunked() seperti berikut: 

val word = "QWERTY"
val chunkedTransform = word.chunked(3) {
    it.toString().toLowerCase()
}

println(chunkedTransform)

/*
    output: [qwe, rty]
    */

Argumen yang berada pada lambda expression di atas merepresentasikan setiap nilai yang sudah dipecah.


