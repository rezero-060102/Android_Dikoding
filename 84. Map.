Map
- https://kotlinlang.org/docs/collections-overview.html
- https://developer.android.com/codelabs/basic-android-kotlin-collections#6
- https://www.youtube.com/watch?v=F8jj7e-_jFA

Turunan yang ketiga adalah Map, yakni sebuah collection yang dapat menyimpan data dengan format key-value.

dos-cacfd7719bdd9de9609e775a029c6a7b20240125164150.png

Perhatikan contoh berikut.

val capital = mapOf(
    "Jakarta" to "Indonesia",
    "London" to "England",
    "New Delhi" to "India"
)

String yang berada pada sebelah kiri dari kata kunci to adalah sebuah key, sedangkan yang di sebelah kanan merupakan value-nya. Lalu untuk mengakses nilai dari Map tersebut, kita bisa menggunakan key yang sudah dimasukkan. Misalnya, kita bisa menggunakan key “Jakarta” untuk mendapatkan value “Indonesia”:

println(capital["Jakarta"])

// Output: Indonesia

Atau bisa juga menggunakan fungsi getValue().

println(capital["Jakarta"])

// Output: Indonesia

Hasilnya sama saja. Namun, sebenarnya terdapat sebuah perbedaan antara keduanya. Saat menggunakan simbol [ ] atau yang kita kenal dengan indexing, konsol akan menampilkan hasil null saat key yang dicari tidak ada di dalam Map, sedangkan saat kita menggunakan getValue(), konsol akan memberikan sebuah Exception.

println(capital["Amsterdam"])

// Output: null


println(capital.getValue("Amsterdam"))

// Output: Exception in thread "main" java.util.NoSuchElementException: Key Amsterdam is missing in the map.

Kita dapat menampilkan key apa saja yang ada di dalam Map dengan menggunakan fungsi keys(). Fungsi ini akan mengembalikan nilai berupa Set karena key pada Map haruslah unik.

val mapKeys = capital.keys

// mapKeys: [Jakarta, London, New Delhi]

Lalu, untuk mengetahui nilai apa saja yang ada di dalam Map, kita bisa menggunakan fungsi values(). Fungsi ini akan mengembalikan collection sebagai tipe datanya.

val mapValues = capital.values

// mapValues: [Indonesia, England, India]

Informasi Tambahan:
Untuk menambahkan key-value ke dalam map, kita perlu memastikan bahwa map yang digunakan adalah mutable. Mari kita ubah map capital yang sudah kita buat sebelumnya menjadi mutable.

val mutableCapital = capital.toMutableMap()

Selanjutnya, kita bisa menambahkan key-value baru menggunakan fungsi put().

mutableCapital.put("Amsterdam", "Netherlands")
mutableCapital.put("Berlin", "Germany")

Namun perlu diperhatikan bahwa menggunakan mutable collection itu tidak disarankan. Apabila terdapat sebuah mutable collection yang diubah oleh lebih dari 1 proses, hasil nya akan sulit untuk diprediksi. Untuk itu, sebaiknya gunakan immutable sebisa mungkin, jika memang dibutuhkan untuk diubah, baru gunakan mutable.
Oke, itulah beberapa Collection yang terdapat di Kotlin. Anda telah mempelajari beberapa perbedaan dan kegunaan dari List, Set, dan Map. Jika ingin mempelajari lebih lanjut, Anda dapat mengeksplorasi beberapa referensi berikut.

Collections overview﻿ : Kotlin Documentation
Use collections in Kotlin : Codelab
Kotlin Collections Overview 

