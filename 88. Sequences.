Sequences
- https://kotlinlang.org/docs/sequences.html
- https://www.youtube.com/watch?v=77hfjIYwouw

Tiga (3) jenis collection yang sudah kita pelajari sebelumnya merupakan jenis collection yang menjalankan eager evaluation. Berbeda dengan itu, Sequence merupakan collection yang bisa dikategorikan ke dalam lazy evaluation. Jika eager evaluation mengevaluasi seluruh item yang ada pada collection [5], lazy evaluation hanya akan mengevaluasi  item jika benar-benar diperlukan [6]. Kita ambil contoh.. Misalnya Anda mempunyai collection dengan jumlah data 10 atau 100 , itu mungkin tidak akan memberi pengaruh besar terhadap performa program. Namun apa yang terjadi jika data yang ada pada collection mencapai ratusan ribu atau jutaan? Waktu proses pada sebuah program akan bertambah signifikan jika semua datanya harus dievaluasi. 

val list = (1..10000).toList()
val number = list.filter { it % 5 == 0 }.map { it * 2 }.first()
println(number)

Pada contoh kode di atas, kita memiliki data collection sejumlah 1 juta item, kemudian masing-masing data akan disaring berdasarkan angka yang merupakan kelipatan 5 lalu dikalikan 2 dan akhirnya ditampilkan satu data pertama pada konsol. Dengan eager evaluation atau dikenal dengan horizontal evaluation, list akan menyelesaikan proses filter terhadap 1 juta data baru kemudian melakukan mapping data sampai akhirnya ditampilkan pada konsol.

dos-65b7fffb343dfe246dabc19b59e2d79720240206131935.png

Untuk menerapkan lazy atau vertical evaluation, kita perlu mengubah list menjadi Sequence. Caranya sangat sederhana, yaitu dengan memanggil fungsi asSequence().

val list = (1..10000).toList()
val number = list.asSequence().filter { it % 5 == 0 }.map { it * 2 }.first()
println(number)

Dengan sequence, operasi akan dilakukan secara vertikal atau per item, misalnya dimulai angka 1. Karena tidak memenuhi kondisi pada filter, operasi tidak akan dilanjutkan ke map(). Sampai dengan iterasi ke-5 akan dilakukan mapping, angka 5 akan dikalikan 2. Karena data pertama, ia akan ditampilkan pada konsol. Setelah itu tidak akan dilanjutkan ke iterasi berikutnya karena kondisi sudah terpenuhi.

dos-bb0f7eed26191e7c3c503f59e108951620240206132013.png

Untuk membuat objek Sequence, kita bisa menggunakan fungsi yang tersedia pada standard library yaitu generateSequence().

val sequenceNumber = generateSequence(1) { it + 1 }

Pada kode di atas kita telah membuat variabel sequenceNumber dengan menggunakan fungsi generateSequence() Fungsi ini memiliki 2 parameter. Parameter pertama adalah item pertama yang ada di dalam collection. Pada contoh kode tadi, setiap item merupakan item sebelumnya ditambah 1. Fungsi generateSequence() akan membuat collection sequence secara tak terbatas. Alhasil, kita perlu menambahkan fungsi take() supaya program tidak mengalami infinite loop.

fun main() {
    val sequenceNumber = generateSequence(1) { it + 1 }
    sequenceNumber.take(5).forEach { print("$it ") }
}
// Output: 1 2 3 4 5

Untuk eksplorasi lebih lanjut, Anda juga dapat melihat referensi berikut ini.

Sequences : Kotlin Documentation
Collections and sequences - Kotlin Vocabulary
