When Expressions
Untuk menentukan statement atau expression kita menggunakan If Expression.  Selain itu kita juga bisa gunakan  When Expression,  yakni mekanisme yang memungkinkan nilai dari sebuah variabel/expression, mampu mengubah alur program.

Contoh sederhana dalam penggunaan when expression adalah seperti berikut:
val value = 7

when(value){
    6 -> println("value is 6")
    7 -> println("value is 7")
    8 -> println("value is 8")
}

/*
        output: value is 7
    */


when akan mencocokan semua argumen yang berada di setiap branch secara berurutan sampai salah satu kondisi terpenuhi. Di dalam when kita juga bisa menambahkan branch else seperti berikut:

val value = 20

when(value){
    6 -> println("value is 6")
    7 -> println("value is 7")
    8 -> println("value is 8")
    else -> println("value cannot be reached")
}

/*
        output: value cannot be reached
    */

else akan dievaluasi jika tiada satupun kondisi yang terpenuhi pada branch sebelumnya. Sama halnya seperti if expression, when expression dapat mengembalikan nilai dan dapat disimpan di dalam sebuah variabel seperti berikut:

val value = 7
val stringOfValue = when (value) {
    6 -> "value is 6"
    7 -> "value is 7"
    8 -> "value is 8"
    else -> "value cannot be reached"
}

println(stringOfValue)

/*
        output : value is 7
    */

else adalah hal wajib jika kita menggunakan when expression untuk mengembalikan nilai. Bagaimana jika kita melewatkannya? Akan tampil eror berikut:
'when' expression must be exhaustive, add necessary 'else' branch

Jika kita memiliki dua atau lebih baris kode yang akan kita jalankan di setiap branch, kita bisa memindahkannya ke dalam curly braces seperti berikut:

val value = 7
val stringOfValue = when (value) {
    6 -> {
        println("Six")
        "value is 6"
    }
    7 -> {
        println("Seven")
        "value is 7"
    }
    8 -> {
        println("Eight")
        "value is 8"
    }
    else -> {
        println("undefined")
        "value cannot be reached"
    }
}

println(stringOfValue)

/*
        output : 
            Seven
            value is 7
    */

when juga memungkinkan kita untuk memeriksa instance dengan tipe tertentu dari sebuah objek menggunakan is atau !is. Contohnya seperti berikut:

val anyType : Any = 100L
when(anyType){
    is Long -> println("the value has a Long type")
    is String -> println("the value has a String type")
    else -> println("undefined")
}

/*
        output : the value has a Long type
    */

Selain itu, when expression juga bisa kita gunakan untuk memeriksa nilai yang terdapat pada sebuah Range atau Collection. Range sendiri merupakan salah satu tipe data yang unik di mana kita dapat menentukan nilai awal dan nilai akhir. Range dan Collection akan dibahas terpisah pada sub-modul berikutnya. 

Berikut adalah contoh saat kita hendak mengecek apakah sebuah nilai ada di dalam sebuah Range atau tidak.

val value =  27
val ranges = 10..50

when(value){
    in ranges -> println("value is in the range")
    !in ranges -> println("value is outside the range")
}

/*
    output : value is in the range
    */

Branch pertama pada contoh kode di atas akan memeriksa apakah nilai dari value terdapat di cakupan nilai ranges. Sedangkan untuk branch kedua akan memeriksa apakah nilai dari value tidak terdapat pada nilai yang dicakup oleh ranges. 

Sejak Kotlin 1.3, kita dapat menangkap subjek dari when expression di dalam sebuah variabel. Contohnya seperti berikut:

fun main() {
    val registerNumber = when(val regis = getRegisterNumber()){
        in 1..50 -> 50 * regis
        in 51..100 -> 100 * regis
        else -> regis
    }
}
 
fun getRegisterNumber() = Random.nextInt(100)

Perhatikan. Cakupan variabel yang dapat ditangkap, terbatas di dalam body when expression.

Jika kita melihat penjelasan dan contoh penggunaan dari when expression di atas, ia memiliki kesamaan dengan if expression. Lantas disituasi seperti apa kita menggunakannya? if expression sebaiknya digunakan ketika kondisi yang diberikan tidak lebih dari 2 (dua) dan kondisi yang diberikan tidak terlalu rumit.

val anyType : Any = 100L
if (anyType is Long){
    println("the value has a Long type")
} else {
    println("the value is not Long type")
}


Berbeda dengan when expression, ia bisa digunakan ketika kondisi yang diberikan lebih dari 2 (dua). 

val anyType: Any = 100L
when (anyType) {
    is Long -> println("the value has a Long type")
    is Int -> println("the value has a Int type")
    is Double -> println("the value has a Double type")
    else -> println("undefined")
}
