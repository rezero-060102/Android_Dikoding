Overloading
Di awal, kita sudah mengenal salah satu pilar dari OOP, yakni Polymorphism. Polymorphism merupakan kemampuan objek, variabel, atau fungsi yang dapat memiliki berbagai bentuk. Alhasil, kita dapat mengembangkan sebuah program secara umum, bukan spesifik.

Polymorphism dapat digambarkan seperti seorang yang menguasai dan mampu berbicara dalam beberapa bahasa. Nah di sini, seseorang yang bertindak sebagai obyek dan kemampuan dia berbicara merupakan sebuah Polymorphism. Contoh lainnya adalah smartphone. Selain sebagai alat komunikasi, smartphone yang bertindak sebagai objek dapat digunakan sebagai kamera, pemutar musik, dan radio.

Dari sisi kode, polimorphism dapat diartikan sebagai sebuah nama fungsi yang dapat melakukan hal yang yang bermacam-macam. Bagaimana itu bisa terjadi? Caranya yaitu dengan membuat Overloading. Overloading merupakan kondisi di mana kita bisa membuat 2 (dua) atau lebih fungsi yang memiliki jumlah, tipe, atau urutan parameter yang berbeda di dalam sebuah class. 

Berikut merupakan contoh overloading fungsi eat() pada sebuah kelas Animal.

class Animal(private var name: String) {
    fun eat() {
        println("$name makan!")
    }
 
    fun eat(typeFood: String) {
        println("$name memakan $typeFood!")
    }
 
    fun eat(typeFood: String, quantity: Double) {
        println("$name memakan $typeFood sebanyak $quantity grams!")
    }
 
    fun sleep() {
        println("$name tidur!")
    }
}

Pada kelas Animal terdapat beberapa fungsi dengan penamaan yang sama, tetapi tidak menyebabkan eror. Sebabnya, fungsi tersebut memiliki parameter yang berbeda sehingga tidak akan terjadi ambiguitas dalam penggunaan fungsi tersebut. Mari kita coba buat sebuah objek dari kelas tersebut dan mengakses fungsinya satu per satu.



Fungsi eat() yang pertama dapat digunakan tanpa mengirimkan parameter apapun. Sedangkan fungsi eat() yang kedua kita mengirimkan sebuah parameter String sebagai nilai typeFood. Dan fungsi eat() yang terakhir membutuhkan 2 (dua) buah parameter, typeFood dan  quantity. 

Overloading pada fungsi merupakan sebuah fitur yang sangat powerful. Untuk dapat lebih memahami betapa pentingnya overloading, mari kita buat sebuah kelas Calculator yang di dalamnya memiliki fungsi matematika dengan menerapkan overloading pada sebuah fungsi.

class Calculator {
    fun add(value1: Int, value2: Int) = value1 + value2
    fun add(value1: Int, value2: Int, value3: Int) = value1 + value2 + value3
    fun add(value1: Double, value2: Double) = value1 + value2
    fun add(value1: Float, value2: Float) = value1 + value2
 
    fun min(value1: Int, value2: Int) = if (value1 < value2) value1 else value2
    fun min(value1: Double, value2: Double) = if (value1 < value2) value1 else value2
}

Kemudian kita buat sebuah objek Calculator pada main() dan mengakses fungsi yang berada pada kelas tersebut.

fun main() {
    val calc = Calculator()
 
    println(calc.add(2, 4))
    println(calc.add(2.5, 2.2))
    println(calc.add(6f, 7f))
    println(calc.add(1, 2, 3))
 
    println(calc.min(9, 2))
    println(calc.min(17.2, 18.3))
}
 
/*
output
    6
    4.7
    13.0
    6
    2
    17.2
*/

Pada contoh yang kita buat, fungsi add(2, 4) memanggil fungsi add yang memiliki parameter Integer, fungsi add(2.5, 2.2) memanggil fungsi add yang memiliki parameter Double, begitu juga dengan yang lainnya.
