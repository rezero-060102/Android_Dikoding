Destructuring Declarations
Destructuring Declaration adalah proses memetakan objek menjadi sebuah variabel. Ini bisa dengan mudah kita lakukan pada data class. Dengan fungsi componentN() yang ada pada data class, kita bisa menguraikan sebuah objek menjadi beberapa properti yang dimilikinya. Sebagai contoh, kita ingin menguraikan objek dataUser:

fun main(){
    val dataUser = DataUser("nrohmen", 17)

    val name = dataUser.component1()
    val age = dataUser.component2()

    println("My name is $name, I am $age years old")
}

Maka jika kode di atas dijalankan, konsol akan menampilkan teks berikut:

My name is nrohmen, I am 17 years old

Fungsi component1() dan component2() dihasilkan sesuai dengan jumlah properti yang ada pada data class tersebut. Maka jika sebuah data class memiliki sejumlah N properti, maka secara otomatis componentN() akan dihasilkan.

Kita juga dapat membuat beberapa variabel dari objek secara langsung dengan kode seperti berikut:

fun main(){
    val dataUser = DataUser("nrohmen", 17)
    val (name, age) = dataUser

    println("My name is $name, I am $age years old")
}

Jika dijalankan, seharusnya konsol akan menampilkan hasil yang sama seperti kode sebelumnya.

Kesimpulannya, seperti aspek - aspek lain dari Kotlin, data class bertujuan untuk mengurangi jumlah kode boilerplate yang Anda tuliskan. Dan perlu diketahui bahwa data class tidak hanya sekedar untuk mengelola properti yang ada di dalamnya. Ketika mempunyai data yang sangat kompleks, kita juga bisa menerapkan sebuah behaviour di dalam data class. Contoh sederhananya, kita bisa membuat fungsi di dalam data class seperti berikut:

data class DataUser(val name : String, val age : Int){
    fun intro(){
        println("My name is $name, I am $age years old")
    }
}

Dan langsung mengaksesnya dari fungsi main():

fun main(){
    val dataUser = DataUser("nrohmen", 23)
    dataUser.intro()
}

