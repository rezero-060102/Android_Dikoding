Fold, Drop, dan Take
Kotlin Collection adalah salah satu struktur data mumpuni yang banyak menyediakan fungsi untuk memudahkan kita dalam mengelola dan memanipulasi data. Pada sub-modul sebelumnya, kita sudah mempelajari beberapa fungsi yang disediakan seperti map(), sum(), sorted(), dan sebagainya.

Pada sub-modul ini kita akan mempelajari beberapa fungsi tingkat lanjut lainnya yang tentunya bisa kita manfaatkan untuk mengelola data seperti yang disebutkan di atas.

Fold
Langsung saja kita mulai dengan fungsi fold, kita bisa dengan mudah melakukan perhitungan setiap nilai yang berada di dalam sebuah collection tanpa harus melakukan iterasi item tersebut satu-persatu menggunakan fungsi fold(). Untuk contoh penggunaannya adalah sebagai berikut:

val numbers = listOf(1, 2, 3)
val fold = numbers.fold(10) { current, item ->
    println("current $current")
    println("item $item")
    println()
    current + item
}

println("Fold result: $fold")

/*
      output:
         current 10
         item 1

         current 11
         item 2

         current 13
         item 3

         Fold result: 16
   */

Fungsi fold() memerlukan 2 (dua) argumen yaitu nilai awal untuk perhitungan dan lambda expression yang nilai kembaliannya digunakan untuk menentukan nilai awal selanjutnya. Nah, di dalam lambda expression nya juga terdapat 2 (dua) argumen. Yaitu, argumen current yang merepresentasikan nilai awal dan argumen item merepresentasikan masing-masing item yang berada pada numbers.

Selain itu, terdapat juga fungsi fold lainnya yaitu foldRight(). Berbeda dengan fungsi fold(), fungsi foldRight() akan melakukan proses iterasi dari indeks terakhir dan posisi dari argumen pada lambda expression nya pun berbeda, di mana argumen item berada pada posisi pertama dan argumen current berada pada posisi kedua. Contohnya seperti berikut:


val numbers = listOf(1, 2, 3)
val fold = numbers.foldRight(10) { item, current ->
    println("current $current")
    println("item $item")
    println()
    item + current
}

println("Fold result: $fold")

/*
      output:
         current 10
         item 3

         current 13
         item 2

         current 15
         item 1

         Fold result: 16
   */


Drop
Selanjutnya adalah fungsi drop(), fungsi yang bisa kita manfaatkan untuk memangkas item yang berada di dalam sebuah objek collection berdasarkan jumlah yang kita tentukan. Sebagai contoh, saat kita mempunyai sebuah collection seperti berikut:

val number = listOf(1, 2, 3, 4, 5, 6)

Kemudian kita ingin memangkas 3 (tiga) item dari collection di atas. Dengan fungsi drop(), kita bisa melakukannya seperti di bawah ini:

val number = listOf(1, 2, 3, 4, 5, 6)
val drop = number.drop(3)

println(drop)
/*
      output: [4, 5, 6]
   */

Seperti yang dijelaskan sebelumnya, nilai 3 yang menjadi argumen dari fungsi drop() di atas adalah jumlah item yang akan dipangkas. Pemangkasan dimulai dari posisi atau indeks pertama, lalu bagaimana jika kita ingin memangkas nilai dari indeks terakhir? Kita bisa menggunakan fungsi dropLast(). Contohnya seperti berikut:


val number = listOf(1, 2, 3, 4, 5, 6)
val drop = number.dropLast(3)

println(drop)

/*
      output: [1, 2, 3]
   */


Take
Jika fungsi drop() digunakan untuk memangkas, fungsi take() bisa kita manfaatkan untuk menyaring item yang berada di dalam sebuah objek collection. Pemanggilan fungsi take() sama halnya seperti fungsi drop() di mana kita perlu menentukan jumlah item yang akan disaring. Berikut contoh penggunaannya:

val total = listOf(1, 2, 3, 4, 5, 6)
val take = total.take(3)

println(take)

/*
      output: [1, 2, 3]
   */

Kotlin juga menyediakan fungsi seperti dropLast() yang menjalankan operasi dari posisi atau indeks terakhir yaitu takeLast(). Contohnya seperti berikut:


val total = listOf(1, 2, 3, 4, 5, 6)
val take = total.takeLast(3)

println(take)

/*
      output: [4, 5, 6]
   */

