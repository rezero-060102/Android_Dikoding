Interfaces
- https://kotlinlang.org/docs/classes.html#abstract-classes
- https://kotlinlang.org/docs/interfaces.html

Interfaces merupakan suatu konsep sifat umum yang nantinya digunakan oleh suatu kelas agar dapat memiliki sifat tersebut. Interface sangat mirip dengan abstract class, namun tanpa sebuah properti deklarasi dan fungsi yang dideklarasikan tanpa isi. Tujuan dari interface ini hanya untuk diimplementasikan oleh sebuah kelas. Kelas yang mengimplementasikan sebuah interface diharuskan melakukan override seluruh properti dan fungsi sekaligus mendefinisikan isi fungsi yang terdapat pada interfaces-nya.

Cara pembuatan sebuah interface mirip dengan membuat kelas. Pada umumnya penamaan sebuah interface dituliskan dengan awalan huruf I kapital. Hal ini tidak diharuskan secara sintaks tapi ini merupakan penerapan terbaik dalam penamaan sebuah interface. Tujuannya agar dapat mudah membedakannya dengan kelas. Berikut merupakan contoh pembuatan sebuah interface:

interface IFly {
    fun fly()
}

Cara mengimplementasikan sebuah interface pada kelas, sama seperti kita melakukan extends pada sebuah super atau parent class. Untuk lebih jelasnya, mari kita buat sebuah kelas burung dengan mengimplementasikan interface IFly:

class Bird : IFly {
    
}

Kita akan mendapati eror ketika selesai menuliskan kode tersebut. Pesan eror tersebut mengatakan “class Bird is not abstract and does not implement abstract member”. Maksud dari eror tersebut adalah kita harus  mengimplementasi sebuah abstract member yang pada kasus ini adalah sebuah fungsi abstract yang terdapat pada IFly. Maka untuk menghilangkan eror tersebut, kita harus melakukan override fungsi yang terdapat pada IFly.

class Bird : IFly {
    override fun fly() {
        println("I flying without wings")
    }
}

Untuk menambahkan sebuah properti pada interface, kita cukup menuliskannya seperti pada kelas namun tanpa melakukan inisialisasi nilai:

interface IFly {
    fun fly()
    val numberOfWings: Int
}

Sama seperti fungsi, kita juga diharuskan melakukan override properti. Overriding properti bisa dilakukan pada sebuah konstruktor kelas seperti berikut:


class Bird(override val numberOfWings: Int) : IFly {
 
    override fun fly() {
        if(numberOfWings > 0) println("Flying with $numberOfWings wings")
        else println("I'm Flying without wings")
    }
}


Perbedaan Abstract Class dan Interface
Walaupun sekilas mirip karena sama sama dapat digunakan untuk kontrak pewarisan dan tidak dapat diinisialisasi langsung menjadi object (harus diturunkan dulu), abstract class dan interface memiliki beberapa perbedaan. Untuk lebih jelasnya, perhatikan kode berikut ini.

abstract class Animal {	
    //default value not allowed
    abstract val age: Int //must be overridden
    
    //default value allowed
    open val isEating = true //optional to be overridden
    val isRespire = true //can not be overridden
}

interface IWalk {
    //default value not allowed
    val numberOfLeg: Int //must be overridden
    fun walk() //must be overridden
}

interface IDrink {
}

class Camel : Animal(), IWalk, IDrink {
    override val age: Int = 7   // this property must exist, try to remove it
    override val isEating = true // this property optional, try to remove it
    override val numberOfLeg = 2 // this property must exist, try to remove it
    override fun walk() { // this method  must exist, try to remove it
        println("Camel can walk")
    }
}

fun main(){
    val camel = Camel()
    camel.walk()
}

Dari kode di atas, kita dapat menyimpulkan beberapa perbedaan berikut ini.

- Abstract Class
Bisa berisi default value.

Setiap member final secara default. Supaya bisa di-override, gunakan keyword abstract (wajib) dan open (opsional).

1 class hanya bisa extend satu abstract class, ditandai dengan ().

Digunakan jika tidak tahu implementasi sebagian member.

Digunakan jika tidak tahu implementasi keseluruhan member.

- Interface
Tidak bisa berisi default value.

Setiap membernya abstract secara default dan harus di-override.

1 class bisa implement lebih dari satu interface.

Digunakan jika tidak tahu implementasi keseluruhan member.


Oke, dari sini Anda sudah memahami perbedaan di antara keduanya dan waktu penggunaannya. Jika ingin mengeksplorasinya lebih lanjut, Anda bisa membaca referensi berikut.

Abstract Class | Kotlin Documentation

Interfaces﻿ | Kotlin Documentation
