Nullable Receiver
Menariknya, kita bisa juga mendeklarasikan sebuah extension dengan nullable receiver type. Alhasil, extension tersebut bisa dipanggil pada objek yang bahkan nilainya null.

val Int?.slice: Int
    get() = if (this == null) 0 else this.div(2)

If expression pada contoh di atas adalah untuk memeriksa apakah receiver object-nya bernilai null. Jika tidak bernilai null, maka receiver object tersebut akan secara otomatis di-casting menjadi tipe non-null, sehingga kita bisa menggunakan nilainya.

Selain menggunakan if expression, kita juga bisa menggunakan elvis operator. Misalnya seperti berikut:

val Int?.slice: Int
    get() = this?.div(2) ?: 0

Untuk memanggilnya pun sama seperti extension properties sebelumnya.

fun main() {
    val value: Int? = null
 
    println(value.slice)
}
 
/*
   output : 0
*/

Lalu kapan kita membutuhkannya? Tentunya jika kita mempunyai sebuah objek yang bernilai null. Saat kita tidak menetapkannya dengan nullable receiver type, maka kita perlu memeriksa apakah objek tersebut bernilai null atau tidak? Bisa juga dengan menggunakan operator safe call setiap kali extension tersebut dipanggil. Contohnya seperti berikut:

fun main() {
    val value: Int? = null
    val value1: Int? = null
 
    println(value?.slice)
    println(value1?.slice)
}
 
val Int.slice: Int
    get() = this.div(2)
 
/*
    output : null
             null
*/

Kita juga bisa menentukan nilai dari receiver object jika bernilai null. Sehingga kita tidak perlu lagi menggunakan operator safe call ketika ingin memanggil extension tersebut.

fun main() {
    val value: Int? = null
    val value1: Int? = null
 
    println(value.slice)
    println(value1.slice)
}
 
val Int?.slice: Int
    get() = this?.div(2) ?: 0
 
/*
    output : 0
             0
*/

