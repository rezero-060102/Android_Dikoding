Kita lanjut ke salah satu pilar lain pada OOP, yakni Abstraction. Abstraction adalah konsep di mana Anda menyembunyikan detail tertentu dari implementasi suatu objek dan hanya menunjukkan fungsionalitas yang relevan atau penting bagi pengguna objek tersebut. Jadi, pada kelas induknya kita hanya mendefinisikan nama method dan property-nya saja, untuk implementasinya nanti diserahkan ke kelas turunannya. Hal ini berbeda dengan konsep inheritance sebelumnya yang seluruh method dan property sudah memiliki implementasi pada kelas induk.

Untuk menerapkan Abstraction, kita bisa menggunakan Abstract Class dan Interface pada bahasa Kotlin. Mari kita pahami satu per satu.

Abstract Class
Seperti namanya, abstract merupakan gambaran umum dari sebuah kelas. Ia tidak dapat direalisasikan dalam sebuah objek. Pada sub-modul sebelumnya kita sudah mempunyai kelas Animal. Secara harfiah hewan merupakan sebuah sifat. Kita tidak tahu bagaimana objek hewan tersebut. Kita tahu bentuk kucing, ikan dan ular seperti apa tetapi tidak untuk hewan. Maka dari itu konsep abstract class perlu diterapkan agar kelas Animal tidak dapat direalisasikan dalam bentuk objek namun tetap dapat menurunkan sifatnya kepada child class-nya.

Untuk menjadikan sebuah kelas abstract, kita hanya perlu menambahkan keyword abstract sebelum menuliskan nama kelas:

abstract class Animal(var name: String, var weight: Double, var age: Int, var isCarnivore: Boolean){
 
    fun eat(){
        println("$name sedang makan !")
    }
 
    fun sleep(){
        println("$name sedang tidur !")
    }
}

Dengan begitu kelas Animal tidak dapat kita inisialisasikan menjadi sebuah objek. 

fun main(){
    val animal = Animal("dicoding animal", 2.6, 1, true)
}

// Output: cannot create an instance of an abstract class

Ketika kita mencoba membuat objek dari kelas Animal, akan terdapat eror berikut:

Cannot create an instance of an abstract class
